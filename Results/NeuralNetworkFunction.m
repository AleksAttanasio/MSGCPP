function [Y,Xf,Af] = myNeuralNetworkFunction(X,Xi,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 28-Mar-2017 17:06:24.
%
% [Y,Xf,Af] = myNeuralNetworkFunction(X,Xi,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 1xQ matrix, input #1 at timestep ts.
%
%   Xi = 1x5 cell 1, initial 5 input delay states.
%   Each Xi{1,ts} = 1xQ matrix, initial states for input #1.
%
%   Ai = 2x0 cell 2, initial 5 layer delay states.
%   Each Ai{1,ts} = 15xQ matrix, initial states for layer #1.
%   Each Ai{2,ts} = 1xQ matrix, initial states for layer #2.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
%
%   Xf = 1x5 cell 1, final 5 input delay states.
%   Each Xf{1,ts} = 1xQ matrix, final states for input #1.
%
%   Af = 2x0 cell 2, final 0 layer delay states.
%   Each Af{1ts} = 15xQ matrix, final states for layer #1.
%   Each Af{2ts} = 1xQ matrix, final states for layer #2.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1_xoffset = -100;
x1_step1_gain = 0.00191241157328827;
x1_step1_ymin = -1;

% Layer 1
b1 = [-1.2873959497359189;-0.0082583597284333985;0.56707930276007779;1.2878816607628443;0.072998236131911226;-0.99434392172783626;-0.002428700417893307;0.023327305643306751;-0.45068533373786018;0.84752061560492631;-2.8075957211670288;-0.828483466319752;0.15361345118150996;-1.1126691397468707;-0.31720521708742511];
IW1_1 = [2.0118304857560885 -1.1841002376893133 -2.0891828416719918 1.2609786174815807 0.43273918686065332;-1.527191468105747 4.7443249319815486 0.37166374715390116 -129.22236592186269 125.81623452648344;-0.052101119352389834 -0.0040017064487302776 -0.0076619405552154655 0.004716813757529208 0.0014235573403706915;-1.4159885661282885 -0.11955111072546977 5.0970627897498044 -4.0566914813810486 -0.049772760191195038;308.28493150920002 -309.11696838813344 3.047861562786669 -1.3708624838985577 -0.076857828105175371;1.790622406576136 -1.0168638201147999 -2.1264834679581952 1.1665928159938219 0.50965872099136977;6.2212409811043567 -10.373218070688429 -1.9608197070558735 9.461904151388854 -2.9608572613393673;304.92109249805685 -300.36060698250884 -3.7111814569108548 -0.13202222997038668 0.079357895777040388;-9.3568760958950516 -3.8218762349187498 1.4860685298065972 8.6636437803640849 2.6063331670757655;4.5223266023622246 -2.235418533580745 -1.1883775579114024 -136.16506465369463 135.25089786615487;1.7074140070310388 -3.0572957254573327 -3.5795236748432222 4.4318386136792949 -1.3191104034258392;-4.449915879355367 2.180654644809207 1.1859133413215892 134.70916423643607 -133.80904425591623;-10.200892706205705 8.0967156318776929 -8.1722394927515669 14.500437803198245 -4.9981844742156332;1.8465296003016995 -1.0839897938129157 -2.0398859175967421 1.1584953170268406 0.47383523603706407;-12.789493682707272 -6.7166906312197527 18.152466930622264 -0.75876561455832381 1.3083280092609768];

% Layer 2
b2 = 11.281015244151407;
LW2_1 = [-7.6615223648532149 0.053370139040413885 -21.750809163365215 -0.17561844181786673 -0.085503539735447387 -8.4287859496499067 0.034486899096040365 0.085488206894961144 0.023818186603462105 3.4440010022431653 -0.15421290103528518 3.4992514912425392 -0.021044900826417554 16.259143929942297 -0.024898961066057906];

% Output 1
y1_step1_ymin = -1;
y1_step1_gain = 0.00191241157328827;
y1_step1_xoffset = -100;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;
if (nargin < 2), error('Initial input states Xi argument needed.'); end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
elseif ~isempty(Xi)
    Q = size(Xi{1},2);
else
    Q = 0;
end

% Input 1 Delay States
Xd1 = cell(1,6);
for ts=1:5
    Xd1{ts} = mapminmax_apply(Xi{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+4,6)+1;
    
    % Input 1
    Xd1{xdts} = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    tapdelay1 = cat(1,Xd1{mod(xdts-[1 2 3 4 5]-1,6)+1});
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*tapdelay1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
end

% Final Delay States
finalxts = TS+(1: 5);
xits = finalxts(finalxts<=5);
xts = finalxts(finalxts>5)-5;
Xf = [Xi(:,xits) X(:,xts)];
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
y = bsxfun(@minus,x,settings_xoffset);
y = bsxfun(@times,y,settings_gain);
y = bsxfun(@plus,y,settings_ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
x = bsxfun(@minus,y,settings_ymin);
x = bsxfun(@rdivide,x,settings_gain);
x = bsxfun(@plus,x,settings_xoffset);
end
